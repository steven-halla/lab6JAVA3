package graphs;

import java.awt.Toolkit;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

import java.util.*;


/**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 * Class        ConnectedGraphGUI.java
 * Description  A class representing the GUI used in the Connected Graph
 *              Application. This program reads data from text files and builds
 *              a graph that is tested for connectivity.
 * Platform     jdk 1.8.0_241; NetBeans IDE 11.3; PC Windows 10
 * Course       CS 143
 * Hourse       4 hours and 17 minutes
 * Date         4/5/2021
 * History Log  7/18/2018, 5/7/2020
 * @author	<i>Niko Culevski</i>
 * @version 	%1% %2%
 * 
 * @see     	javax.swing.JFrame
 * @see         java.awt.Toolkit
 *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
public class ConnectedGraphGUI extends javax.swing.JFrame
        //20:00 Min video 1
{
    private String fileName = "src/graphs/GraphSample1.txt";
    private StringBuffer output = new StringBuffer();
    private List<AbstractGraph.Edge>list;
    private Graph<Integer> graph;
    private int numberOfVertices = 0;
    private boolean isConnected = false;

    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * Constructor  ConnectedGraphGUI()-default constructor
     * Description  Create an instance of the GUI form, set icon image, set
     *              default button, and instantiate list and graph.
     * Date         4/5/2021
     * History Log  7/18/2018, 5/7/2020
     * @author      <i>Niko Culevski</i>
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/ 
    public ConnectedGraphGUI()
    {
        initComponents();
        //set image
        this.setIconImage(Toolkit.getDefaultToolkit().getImage("src/Images/Graph_small.png"));
  
        //set default button
        this.getRootPane().setDefaultButton(goJButton);   
        list = new ArrayList<>();

        graph = new UnweightedGraph<>(list, numberOfVertices);
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     * Method       readFromFile()
     * Description  Read text file and create ArrayList.
     * Date:        4/23/2019
     * @author      <i>Niko Culevski</i>
     * @param       fileName String
  
     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void readFromFile(String fileName)
    {        
        try 
        {
            File file = new File(fileName);
            Scanner inFile = new Scanner(file);
            list = new java.util.ArrayList();
            
            
            String line = inFile.nextLine();
            numberOfVertices = Integer.parseInt(line);
            
            while(inFile.hasNext())
            {
                line = inFile.nextLine();
                String[] tokens = line.split("[\\s+]");
                int startingVertex = Integer.parseInt(tokens[0].trim());
                for (int i = 1; i < tokens.length; i++)
                {
                    int adjacentVertex = Integer.parseInt(tokens[i].trim());
                    list.add(new AbstractGraph.Edge(startingVertex, adjacentVertex));
                    
                }
                
            }
              
          
        }
        catch(FileNotFoundException fnfexp)
                    {
                    JOptionPane.showMessageDialog(null, "input errors -- FIle not found.",
                            "File Not Found Error!", JOptionPane.ERROR_MESSAGE);
                    }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titleJLabel = new javax.swing.JLabel();
        fileJLabel = new javax.swing.JLabel();
        filesJComboBox = new javax.swing.JComboBox<>();
        controlJPanel = new javax.swing.JPanel();
        goJButton = new javax.swing.JButton();
        quitJButton = new javax.swing.JButton();
        resultsScrollPane = new javax.swing.JScrollPane();
        resultsJTextArea = new javax.swing.JTextArea();
        personJMenuBar = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        newJMenuItem = new javax.swing.JMenuItem();
        shortestPathJMenuItem = new javax.swing.JMenuItem();
        showPictureOfGraphsJMenuItem = new javax.swing.JMenuItem();
        fileJSeparator = new javax.swing.JPopupMenu.Separator();
        printMenuItem = new javax.swing.JMenuItem();
        quitJMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        aboutJMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Connected Graph");
        setResizable(false);

        titleJLabel.setFont(new java.awt.Font("Tempus Sans ITC", 2, 26)); // NOI18N
        titleJLabel.setForeground(new java.awt.Color(0, 102, 102));
        titleJLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Graph_small.png"))); // NOI18N
        titleJLabel.setText("Connected Graph");

        fileJLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fileJLabel.setText("Select File:");

        filesJComboBox.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        filesJComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "GraphSample1.txt", "GraphSample2.txt", "GraphSample3.txt", "GraphSample4.txt" }));
        filesJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filesJComboBoxActionPerformed(evt);
            }
        });

        controlJPanel.setLayout(new java.awt.GridLayout(2, 1, 3, 3));

        goJButton.setBackground(new java.awt.Color(255, 255, 204));
        goJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        goJButton.setMnemonic('g');
        goJButton.setText("Go");
        goJButton.setToolTipText("Show results");
        goJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(goJButton);

        quitJButton.setBackground(new java.awt.Color(255, 255, 204));
        quitJButton.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        quitJButton.setMnemonic('Q');
        quitJButton.setText("Quit");
        quitJButton.setToolTipText("End the Application");
        quitJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitJButtonActionPerformed(evt);
            }
        });
        controlJPanel.add(quitJButton);

        resultsJTextArea.setEditable(false);
        resultsJTextArea.setBackground(new java.awt.Color(240, 240, 240));
        resultsJTextArea.setColumns(20);
        resultsJTextArea.setFont(new java.awt.Font("Verdana", 0, 16)); // NOI18N
        resultsJTextArea.setLineWrap(true);
        resultsJTextArea.setRows(5);
        resultsJTextArea.setWrapStyleWord(true);
        resultsScrollPane.setViewportView(resultsJTextArea);

        fileJMenu.setMnemonic('F');
        fileJMenu.setText("File");

        newJMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newJMenuItem.setMnemonic('N');
        newJMenuItem.setText("New");
        newJMenuItem.setToolTipText("Load new Philosopher database");
        newJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(newJMenuItem);

        shortestPathJMenuItem.setMnemonic('h');
        shortestPathJMenuItem.setText("Shortest Path");
        shortestPathJMenuItem.setToolTipText("Find the shortest path between two vertices");
        shortestPathJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortestPathJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(shortestPathJMenuItem);

        showPictureOfGraphsJMenuItem.setMnemonic('S');
        showPictureOfGraphsJMenuItem.setText("Show Graphs");
        showPictureOfGraphsJMenuItem.setToolTipText("Show pictures of graphs");
        showPictureOfGraphsJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showPictureOfGraphsJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(showPictureOfGraphsJMenuItem);
        fileJMenu.add(fileJSeparator);

        printMenuItem.setMnemonic('P');
        printMenuItem.setText("Print Form");
        printMenuItem.setToolTipText("Print Form as GUI");
        printMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(printMenuItem);

        quitJMenuItem.setMnemonic('Q');
        quitJMenuItem.setText("Quit");
        quitJMenuItem.setToolTipText("");
        quitJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitJMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(quitJMenuItem);

        personJMenuBar.add(fileJMenu);

        helpMenu.setMnemonic('H');
        helpMenu.setText("Help");

        aboutJMenuItem.setMnemonic('A');
        aboutJMenuItem.setText("About");
        aboutJMenuItem.setToolTipText("Show About form");
        aboutJMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutJMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutJMenuItem);

        personJMenuBar.add(helpMenu);

        setJMenuBar(personJMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(filesJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(controlJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(titleJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resultsScrollPane))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(titleJLabel)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(fileJLabel)
                            .addComponent(filesJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(controlJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addComponent(resultsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(37, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

     * Method       printJMenuItemActionPerformed()
     * Description  Event handler to print the for as a GUI. Calls the
     *              PrintUtilities class static printComponent method.
     * @author      <i>Niko Culevski</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 4/3/2020
 
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void printMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_printMenuItemActionPerformed
    {//GEN-HEADEREND:event_printMenuItemActionPerformed
        PrintUtilities.printComponent(this);
    }//GEN-LAST:event_printMenuItemActionPerformed
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   
     * Method       quitJMenuItemActionPerformed()
     * Description  Event handler to end the application. Calls the quitJButton
     *              doClick event handler,
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
  
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void quitJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJMenuItemActionPerformed
    {//GEN-HEADEREND:event_quitJMenuItemActionPerformed
        quitJButton.doClick();
    }//GEN-LAST:event_quitJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         * Method       aboutJMenuItemActionPerformed()
     * Description  Create an About form and show it. 
     * @param       evt java.awt.event.KeyEvent
     * @author      <i>Niko Culevski</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 5/7/2020

    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void aboutJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_aboutJMenuItemActionPerformed
    {//GEN-HEADEREND:event_aboutJMenuItemActionPerformed
        About aboutWindow = new About(this, true);
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_aboutJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
     * Method       newJMenuItemActionPerformed
     * Description  Event handler to chose a separate file for a graph. Also
     *              calls readFromFile and createGraph methods.
     * @param       evt java.awt.event.KeyEvent
     * @author      <i>Niko Culevski</i>

     *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void newJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_newJMenuItemActionPerformed
    {//GEN-HEADEREND:event_newJMenuItemActionPerformed
        try
        {
            JFileChooser chooser = new JFileChooser("src/graphs");
            FileNameExtensionFilter filter = new FileNameExtensionFilter(
            "Txt Files", "txt");
            
            chooser.setFileFilter(filter);
            int choice = chooser.showOpenDialog(null);
            if (choice == JFileChooser.APPROVE_OPTION)
            {
                File choosenFile = chooser.getSelectedFile();
                fileName = "src/graphs/" + choosenFile.getName();
                filesJComboBox.setSelectedItem(choosenFile.getName());
                
                readFromFile(fileName);
                createGraph();
              
            }
              else
                {
                        JOptionPane.showMessageDialog(null, "Cannots find file",
                                "File Input Error", JOptionPane.WARNING_MESSAGE);
                }
           
        }
         catch(java.lang.IllegalArgumentException exp)
                    {
                    JOptionPane.showMessageDialog(null, "File is not in correct format.",
                            "File Input Error", JOptionPane.WARNING_MESSAGE);
                    }
    }//GEN-LAST:event_newJMenuItemActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
     * Method       quitJButtonActionPerformed()
     * Description  Event handler to end the application.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void quitJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_quitJButtonActionPerformed
    {//GEN-HEADEREND:event_quitJButtonActionPerformed
        System.exit(0);        
    }//GEN-LAST:event_quitJButtonActionPerformed
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
     * Method       goJButtonActionPerformed()
     * Description  Event handler to end the application.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void goJButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_goJButtonActionPerformed
    {//GEN-HEADEREND:event_goJButtonActionPerformed
        try
        {
            resultsJTextArea.setText("");
            output = new StringBuffer();
            String fileComboBox = filesJComboBox.getSelectedItem().toString();
            fileName = "src/graphs/" + fileComboBox;
            readFromFile(fileName);
            createGraph();
            
            
        }
        catch(Exception exp)
        {
            JOptionPane.showMessageDialog(null, exp.getMessage(),
                    "Cannot create graph", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_goJButtonActionPerformed

    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
     * Method       showPictureOfGraphsMenuItemActionPerformed()
     * Description  Display picture of the two files and the graphs used.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void showPictureOfGraphsJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_showPictureOfGraphsJMenuItemActionPerformed
    {//GEN-HEADEREND:event_showPictureOfGraphsJMenuItemActionPerformed
        new ShowGraphs(this,true).setVisible(true);
    }//GEN-LAST:event_showPictureOfGraphsJMenuItemActionPerformed
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
     * Method       shortestPathJMenuItemActionPerformed()
     * Description  If the graph is connected, prompt the user to enter two 
     *              vertices and then display the shortest path between the 
     *              two vertices.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    private void shortestPathJMenuItemActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_shortestPathJMenuItemActionPerformed
    {//GEN-HEADEREND:event_shortestPathJMenuItemActionPerformed
        try
        {
            goJButtonActionPerformed(evt);
            if(!isConnected)
            {
                resultsJTextArea.setText("Graph is not connected.");
                        
            }
            else
            {
                int v1 = Integer.parseInt(JOptionPane.showInputDialog("Enter the first vertext"));
                int v2 = Integer.parseInt(JOptionPane.showInputDialog("Enter the second vertext"));
                goJButton.doClick();
                AbstractGraph<Integer>.Tree tree = graph.bfs(v1);
                List<Integer> path = tree.getPath(v2);
                output.append("\nThe path is ");
                for (int i = 0; i < path.size(); i++)
                    output.append(path.get(i) + " ");
                resultsJTextArea.setText(output.toString());
            }
        }
        catch(Exception exp)
        {
            JOptionPane.showMessageDialog(null, "Cannot find path",
                    "Path Error", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_shortestPathJMenuItemActionPerformed

    private void filesJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filesJComboBoxActionPerformed
        // TODO add your handling code here:
        //48:44
    }//GEN-LAST:event_filesJComboBoxActionPerformed
    
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     
     * Method       createGraph()
     * Description  Created UnweightedGraph and associated tree and decide if
     *              the graph is connected.
     * @author      <i>Niko Culevski</i>
     * Date         4/3/2020
     * History Log  7/18/2018     
    
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public void createGraph()
    {
        resultsJTextArea.setText("");
        output = new StringBuffer();
        
        graph = new UnweightedGraph<>(list, numberOfVertices);
        output.append("The number of vertices is " + numberOfVertices +
                "\n\n");
        
        AbstractGraph<Integer>.Tree tree = graph.dfs(0);
        output.append(graph.displayEdges().toString() + "\n");
        
        if (tree.getNumberOfVerticesFound() == numberOfVertices)
        {
            output.append("The graph is connected");
            isConnected = true;
        }
        else
        {
            output.append("the graph is not connected");
            isConnected = false;
        }
        resultsJTextArea.setText(output.toString());
    }
    /**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    
     * Method       main()
     * Description  Displays splash screen and the main GUI form.
     * @param       args are the command line strings
     * @author      <i>Niko Culevski</i>
     * Date         4/5/2021
     * History Log  7/18/2018, 5/7/2020
     
    *~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    public static void main(String args[])
    {
        // Show splash screen
//        Splash mySplash = new Splash(4000);     // duration = 5 seconds
//        mySplash.showSplash();                  // show splash screen  
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ConnectedGraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ConnectedGraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ConnectedGraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ConnectedGraphGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new ConnectedGraphGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutJMenuItem;
    private javax.swing.JPanel controlJPanel;
    private javax.swing.JLabel fileJLabel;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JPopupMenu.Separator fileJSeparator;
    private javax.swing.JComboBox<String> filesJComboBox;
    private javax.swing.JButton goJButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JMenuItem newJMenuItem;
    private javax.swing.JMenuBar personJMenuBar;
    private javax.swing.JMenuItem printMenuItem;
    private javax.swing.JButton quitJButton;
    private javax.swing.JMenuItem quitJMenuItem;
    private javax.swing.JTextArea resultsJTextArea;
    private javax.swing.JScrollPane resultsScrollPane;
    private javax.swing.JMenuItem shortestPathJMenuItem;
    private javax.swing.JMenuItem showPictureOfGraphsJMenuItem;
    private javax.swing.JLabel titleJLabel;
    // End of variables declaration//GEN-END:variables
}
